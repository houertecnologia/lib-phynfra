[tool.poetry]
name = "phynfra"
version = "0.1.0"
description = "Reposit√≥rio de libs utilizados nos projetos houer"
authors = ["Houer Tecnologia"]
readme = "readme.md"
packages = [{include = "phynfra"}]

[tool.poetry.dependencies]
python = "^3.10"
click = "^8.1.3"
simple-term-menu = "^1.6.1"
loguru = "^0.7.0"
redshift-connector = "^2.0.913"
pyspark = "3.3.1"
delta-spark = "2.3.0"
venv-pack = "^0.2.0"
boto3 = "^1.28.8"
pandas = "2.0.3"
deltalake = "0.10.0"
aiobotocore= "2.5.4"
httpx = "0.24.1"
openpyxl = "^3.1.2"
python-dotenv = "^1.0.0"
s3fs = "^2023.9.0"

[tool.poetry.group.lint.dependencies]
flake8 = "^5.0.4"                                 # Style Guide Enforcement
pyproject-flake8 = "^5.0.4"                       # Allows configuration of flake 8 from pyproject.toml
flake8-bugbear = "^22.9.23"                       # Finding likely bugs and design problems in your program.
flake8-print = "^5.0.0"                           # Check for print statements in python files.
flake8-docstrings = "^1.6.0"                      # Include checks provided by pep257.
flake8-annotations = "^2.9.1"                     # check for presence of type annotations in function definitions.
isort = "^5.10.1"                                 # Sort imports
yamllint = "^1.28.0"                              # Linter for YAML files
bandit = {version = "1.7.4", extras = ["toml"]}   # Security linter
black = "^22.10.0"                                # Python style checks
pre-commit = "^2.20.0"                            # Runs a pipeline before commiting code
commitizen = "^2.35.0"                            # Check commit messages

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
target-version = ['py39']
line-length = 120
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.github
  | \.circleci
  | \.hg
  | \.mypy_cache
  | \.tox
  | \venv
  | \.venv
  | \.eggs
  | _build
  | buck-out
  | build
  | dist
  | src
  | venv
)/
'''
[tool.isort]
profile = 'black'
force_single_line = true
combine_as_imports = true
lines_between_types = 1
lines_after_imports = 2
src_paths = ["a3express"]
line_length = 120

[tool.flake8]
max-line-length = 119
select = [  # Choose the flake8 errors to select globally here
  "C",      # McCabe complexity
  "E",      # pep8 errors
  "W",      # pep8 warnings
  "F",      # pyflakes errors
  "N",      # naming conventions
  "B",      # bugbear errors (needs plugin installed)
  "ANN",    # flake8 annotations errors (needs plugin installed)
  "T",      # flake8 print errors (needs plugin installed)
  "D",      # flake8 doscstrings errors (needs plugin installed)
  "B950",   #  Line too long. It considers "max-line-length" but only triggers when exceeded by more than 10%.
]
ignore = [   # Choose the flake8 errors to ignore globally here
  "E501",    # Line too long  (using B950 instead, which has 10% tolerance)
  "D107",    # Missing docstring in __init__
  "D202",    # No blank lines allowed after function docstring
  "D400",    # First line should end with a period
  "D100",    # Missing docstring in public module
  "D104",    # Missing docstring in public package
  "ANN003",  # Missing type annotation for **kwargs
  "ANN002",  # Missing type annotation for **args
  "ANN1",    # Missing type annotation for self in methot or cls method
]
per-file-ignores = [     # Choose the flake8 errors to ignore per file here
  "*/__init__.py:F401",  # Ignore imported but unused in __init__.py files
  "tests/*:ANN,D",       # Ignore Docstring and annotations on tests
]
exclude = [
    ".venv/*",
    ".vscode/*",
    "cdk.out/*",
]
# See other flake8 extensions here: https://github.com/DmytroLitvinov/awesome-flake8-extensions

[tool.bandit]
skips = [      # Choose the bandit errors to ignore globally
  "B101",       # Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.
  "B608",
  "B105",
  "B106",
  "B311"
]
exclude_dirs = [
  ".venv",
  "cdk.out",
]

#[tool.pytest.ini_options]
#minversion = "7.1"
#addopts = """
#  --verbose
#  --color=yes
#  --assert=plain
#  --cov-report term
#  --cov=a3express tests/
#  --last-failed
#"""
#testpaths = ["tests"]
